<?xml version="1.0" encoding="UTF-8" ?>
<!--
 This is the Solr schema file. This file should be named "schema.xml" and
 should be in the conf directory under the solr home
 (i.e. ./solr/conf/schema.xml by default)
 or located where the classloader for the Solr webapp can find it.

 For more information, on how to customize this file, please see
 http://wiki.apache.org/solr/SchemaXml
-->

<schema name="gazetteer" version="1.5">
    <!-- attribute "name" is the name of this schema and is only used for display purposes.
         version="x.y" is Solr's version number for the schema syntax and semantics.  It should
         not normally be changed by applications.
         1.0: multiValued attribute did not exist, all fields are multiValued by nature
         1.1: multiValued attribute introduced, false by default
         1.2: omitTermFreqAndPositions attribute introduced, true by default except for text fields.
         1.3: removed optional field compress feature
         1.4: default auto-phrase (QueryParser feature) to off
         1.5: omitNorms defaults to true for primitive field types (int, float, boolean, string...)
       -->

    <fields>
        <!-- Valid attributes for fields:
          name: mandatory - the name for the field
          type: mandatory - the name of a field type from the
            <types> fieldType section
          indexed: true if this field should be indexed (searchable or sortable)
          stored: true if this field should be retrievable
          multiValued: true if this field may contain multiple values per document
          omitNorms: (expert) set to true to omit the norms associated with
            this field (this disables length normalization and index-time
            boosting for the field, and saves some memory).  Only full-text
            fields or fields that need an index-time boost need norms.
            Norms are omitted for primitive (non-analyzed) types by default.
          termVectors: [false] set to true to store the term vector for a
            given field.
            When using MoreLikeThis, fields used for similarity should be
            stored for best performance.
          termPositions: Store position information with the term vector.
            This will increase storage costs.
          termOffsets: Store offset information with the term vector. This
            will increase storage costs.
          required: The field is required.  It will throw an error if the
            value does not exist
          default: a value that should be used if no value is specified
            when adding a document.
        -->

        <!-- field names should consist of alphanumeric or underscore characters only and
           not start with a digit.  This is not currently strictly enforced,
           but other field names will not have first class support from all components
           and back compatibility is not guaranteed.  Names with both leading and
           trailing underscores (e.g. _version_) are reserved.
        -->

        <!-- Integer ID from gazetteer ETL; Integer for performance reasons -->
        <field name="id" type="int" required="true" />
        <!--<field name="_version_" type="long" />-->

        <!-- Place ID from source gazetteer -->
        <field name="place_id" type="string" required="true" />

        <!-- place name indexed for typical free-text search -->
        <field name="name" type="name_text" required="true" />

        <!-- place name indexed separately for the tagger -->
        <field name="name_tag" type="name_tag" stored="false"/>
        <copyField source="name" dest="name_tag" />

        <!-- phonetic variant for FST -->
        <!--
        <field name="name_idx" type="name_idx"                    stored="false"  omitTermFreqAndPositions="true" omitNorms="true"/>
        <copyField source="name" dest="name_idx" />
        -->

        <!-- phonetic variant for deep name matching
         -->
        <!-- TODO: Phonetic name matching later.
        <field name="name_phoneme"  type="phonetic"               stored="false"  omitTermFreqAndPositions="true" omitNorms="true"/>

        <copyField source="name" dest="name_phoneme" />
         -->

        <!-- geo = XY coordinate in the form 'lat,lon' update-script.js handles merging fields
             lat,lon are now ignored
         -->
        <field name="geo" type="geo" />
        <!--
         @deprecation
         Optimizations:  we do not store lat,lon separately as of OpSx v1.5
        <field name="lat" type="tdouble" />
        <field name="lon" type="tdouble" /> -->
        <field name="lat" type="ignored" />
        <field name="lon" type="ignored" />

        <!-- see update-script.js -->
        <field name="SplitCategory" type="ignored" />

        <!-- Name and ID bias stats are generated ahead of time and built in using ETL scripts
          these numbers offer tuning for downstream geocoding rules
         -->
        <field name="name_bias" type="tfloat" />
        <field name="id_bias" type="tfloat" />

        <!-- Geonames style Feature Class - A, P, L, H, V, S, T, R -->
        <field name="feat_class" type="string" />
        <!-- Geonames style Feature Code - ADM1, PPL, etc-->
        <field name="feat_code" type="string" />

        <!-- ISO country code is 'cc' -->
        <field name="cc" type="string" />
        <field name="FIPS_cc" type="string" />
        <field name="ISO3_cc" type="string" />
        <!--
         @deprecation
         Optimizations: each distinct country code standard is stored once.
         cc is ISO 2-alpha;  as of OpSx v1.5 ISO_cc is no longer used.
        <field name="ISO_cc"   type="string" />
        <copyField source="ISO_cc" dest="cc" />
         -->

        <field name="adm1" type="string" />
        <field name="adm2" type="string" />
        <field name="adm3" type="string" />

        <!-- Name type is a flag that tells us if an entry is a code, abbrev (A), or a name (N) -->
        <field name="name_type" type="string" />

        <!--  TODO: Make use of Currently unused fields, e.g., source is source of gazetteer records, e.g., NGA, user, USGS, etc.
        <field name="script"       type="string" />
         -->
        <field name="source" type="string" />

        <!--

        "Record_ID":12803368, X
        "PLACE_ID":"USGS1992110", Y
        "PLACE_NAME":"San Fernando", Y
        "LATITUDE":"18.38745", Y
        "LONGITUDE":"-66.25461", Y
        "FEATURE_CLASS":"P", Y
        "FEATURE_CODE":"PPL", Y
        country_code: xx // ISO2
        "FIPS_COUNTRY_CODE":"RQ",
        "ISO2_COUNTRY_CODE":"PR",
        "ISO3_COUNTRY_CODE":"PRI",

        "ADMIN_LEVEL_1":"RQ72", Y
        "ADMIN_LEVEL_2":"RQ72.0135", Y
        "SOURCE":"USGS GNIS", N
        "SOURCE_FEATURE_ID":1992110, N
        "SCRIPT":"BASIC_LATIN", N
        "CONFLATE_KEY":1148752447, N
        "PLACE_NAME_BIAS":0.0, Y
        "PLACE_ID_BIAS":0.0 Y

        -->
        <!--
        <dynamicField name="*" type="string" indexed="true"/>
        -->

        <!-- Uncommenting the following will create a "timestamp" field using
             a default value of "NOW" to indicate when each document was indexed.
          -->
        <!--
        <field name="timestamp" type="date" indexed="true" stored="true" default="NOW" multiValued="false"/>
          -->

        <!-- Dynamic field definitions allow using convention over configuration
            for fields via the specification of patterns to match field names.
            EXAMPLE:  name="*_i" will match any field ending in _i (like myid_i, z_i)
            RESTRICTION: the glob-like pattern in the name attribute must have
            a "*" only at the start or the end.  -->

    </fields>


    <!-- Field to use to determine and enforce document uniqueness.
         Unless this field is marked with required="false", it will be a required field
      -->
    <uniqueKey>id</uniqueKey>

    <!-- copyField commands copy one field to another at the time a document
          is added to the index.  It's used either to index the same field differently,
          or to add multiple fields to the same field for easier/faster searching.  -->

    <!-- <copyField source="cat" dest="text"/> -->

    <types>
        <!-- field type definitions. The "name" attribute is
           just a label to be used by field definitions.  The "class"
           attribute and any other attributes determine the real
           behavior of the fieldType.
             Class names starting with "solr" refer to java classes in a
           standard package such as org.apache.solr.analysis
        -->

        <!-- The StrField type is not analyzed, but indexed/stored verbatim. -->
        <fieldType name="string" class="solr.StrField" sortMissingLast="true" />

        <!-- boolean type: "true" or "false" -->
        <fieldType name="boolean" class="solr.BoolField" sortMissingLast="true" />

        <!-- sortMissingLast and sortMissingFirst attributes are optional attributes are
             currently supported on types that are sorted internally as strings
             and on numeric types.
             This includes "string","boolean", and, as of 3.5 (and 4.x),
             int, float, long, date, double, including the "Trie" variants.
           - If sortMissingLast="true", then a sort on this field will cause documents
             without the field to come after documents with the field,
             regardless of the requested sort order (asc or desc).
           - If sortMissingFirst="true", then a sort on this field will cause documents
             without the field to come before documents with the field,
             regardless of the requested sort order.
           - If sortMissingLast="false" and sortMissingFirst="false" (the default),
             then default lucene sorting will be used which places docs without the
             field first in an ascending sort and last in a descending sort.
        -->

        <!--
          Default numeric field types. For faster range queries, consider the tint/tfloat/tlong/tdouble types.
        -->
        <fieldType name="int" class="solr.TrieIntField" precisionStep="0"
                   positionIncrementGap="0" />
        <fieldType name="float" class="solr.TrieFloatField" precisionStep="0"
                   positionIncrementGap="0" />
        <fieldType name="long" class="solr.TrieLongField" precisionStep="0"
                   positionIncrementGap="0" />
        <fieldType name="double" class="solr.TrieDoubleField" precisionStep="0"
                   positionIncrementGap="0" />


        <fieldType name="tint" class="solr.TrieIntField" precisionStep="8"
                   positionIncrementGap="0" />
        <fieldType name="tfloat" class="solr.TrieFloatField" precisionStep="8"
                   positionIncrementGap="0" />
        <fieldType name="tlong" class="solr.TrieLongField" precisionStep="8"
                   positionIncrementGap="0" />
        <fieldType name="tdouble" class="solr.TrieDoubleField" precisionStep="8"
                   positionIncrementGap="0" />

        <fieldType name="date" class="solr.TrieDateField" precisionStep="0"
                   positionIncrementGap="0" />

        <!-- A Trie based date field for faster date range queries and date faceting. -->
        <fieldType name="tdate" class="solr.TrieDateField" precisionStep="6"
                   positionIncrementGap="0" />

        <!--Binary data type. The data should be sent/retrieved in as Base64 encoded Strings -->
        <fieldtype name="binary" class="solr.BinaryField" />

        <!-- The "RandomSortField" is not used to store or search any
             data.  You can declare fields of this type it in your schema
             to generate pseudo-random orderings of your docs for sorting
             or function purposes.  The ordering is generated based on the field
             name and the version of the index. As long as the index version
             remains unchanged, and the same field name is reused,
             the ordering of the docs will be consistent.
             If you want different psuedo-random orderings of documents,
             for the same version of the index, use a dynamicField and
             change the field name in the request.
         -->
        <fieldType name="random" class="solr.RandomSortField" indexed="true" />




        <!-- 

            =============================================================
            OpenSextant Xponents custom types start here.
            =============================================================

        -->


        <!-- Looks like we could benefit from a char filter that combines contractions and ASCII folding;
                 Sure, its more elegant to maintain separate char filters;  Or a char filter and token filter.
             See also name_idx* fields that have phonetic support
             SOLR-TEXT-TAGGER v2.0 in effect here:  postingsFormat="Memory"
          -->
        <fieldType name="name_tag" class="solr.TextField" positionIncrementGap="100"
                   postingsFormat="Memory" omitTermFreqAndPositions="true" omitNorms="true">
            <!-- ?? <charFilter class="solr.MappingCharFilterFactory" mapping="contraction-filter2.txt"/> -->
            <analyzer type="index">
                <charFilter class="solr.MappingCharFilterFactory"
                            mapping="OpenSextant-Gazetteer-ASCIIFolding.txt" />
                <tokenizer class="solr.ClassicTokenizerFactory" />
                <filter class="solr.LowerCaseFilterFactory" />
                <!-- only difference between index & query chains: -->
                <filter class="org.opensextant.solrtexttagger.ConcatenateFilterFactory" />
            </analyzer>
            <analyzer type="query">
                <charFilter class="solr.MappingCharFilterFactory"
                            mapping="OpenSextant-Gazetteer-ASCIIFolding.txt" />
                <tokenizer class="solr.ClassicTokenizerFactory" />
                <filter class="solr.LowerCaseFilterFactory" />
            </analyzer>
        </fieldType>

        <!-- Functionally the same as text_general, but no stop filter -->
        <fieldType name="name_text" class="solr.TextField" positionIncrementGap="100">
            <analyzer>
                <tokenizer class="solr.StandardTokenizerFactory" />
                <filter class="solr.LowerCaseFilterFactory" />
            </analyzer>
        </fieldType>

        <!-- since fields of this type are by default not stored or indexed,
             any data added to them will be ignored outright.  -->
        <fieldtype name="ignored" stored="false" indexed="false" multiValued="true"
                   class="solr.StrField" />

        <!-- A specialized field for geospatial search. If indexed, this fieldType must not be multivalued. -->
        <!--<fieldType name="location" class="solr.LatLonType" subFieldSuffix="_coordinate" />-->

        <!-- Geospatial field type (aka GeoSolr)
        http://wiki.apache.org/solr/SolrAdaptersForLuceneSpatial4

        Note: This field type has some optional params:
        spatialContextFactory, geo, distCalculator, worldbounds,
        distErrPct,
        defaultFieldValuesArrayLen, prefixTree, maxLevels, maxDistErr
        -->
        <fieldType name="geo" class="solr.SpatialRecursivePrefixTreeFieldType"
                   maxDistErr="0.00009" distErrPct="0.025"
                   units="degrees" />
        <!-- spatialContextFactory="com.spatial4j.core.context.jts.JtsSpatialContextFactory" -->
        <!-- maxDistErr="0.00009"/> 10meter accuracy specified in degrees (111.2km/degree)-->

    </types>


</schema>
